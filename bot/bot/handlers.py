from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram import html, Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import django
from main.models import DATT
from django.contrib.auth import authenticate
from users.models import UserProfile

from asgiref.sync import sync_to_async

from  bot.keyboard import keyboard


import os


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
django.setup()

def create_router():
    rot = Router()
    class AuthStates(StatesGroup):
        waiting_for_login = State()
        waiting_for_password = State()
        waiting_for_sensor_id = State() 





    @rot.message(F.text == "/start")
    async def cmd_start(message: Message, state: FSMContext):
        telegram_id = message.from_user.id

        profile = await sync_to_async(UserProfile.objects.filter(telegram_id=telegram_id).first)()

        if profile:
            username = await sync_to_async(lambda: profile.user.username)()
            await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!", reply_markup=keyboard)
            await state.clear()
            return

        await message.answer("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
        await state.set_state(AuthStates.waiting_for_login)

    @rot.message(AuthStates.waiting_for_login)
    async def ask_password(message: Message, state: FSMContext):
        await state.update_data(login=message.text)
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await state.set_state(AuthStates.waiting_for_password)

    @rot.message(AuthStates.waiting_for_password)
    async def process_login(message: Message, state: FSMContext):
        data = await state.get_data()
        login = data['login']
        password = message.text
        telegram_id = message.from_user.id

        user = await sync_to_async(authenticate)(username=login, password=password)

        if user:
            profile, created = await sync_to_async(UserProfile.objects.get_or_create)(
            user=user,
            defaults={'sensor_id': None}  
            )
            profile.telegram_id = telegram_id
            await sync_to_async(profile.save)()
            await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É.")
            await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –¥–∞—Ç—á–∏–∫–∞:")
            await state.set_state(AuthStates.waiting_for_sensor_id)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.set_state(AuthStates.waiting_for_login)

    @rot.message(AuthStates.waiting_for_sensor_id)
    async def save_sensor_id(message: Message, state: FSMContext):
        try:
            sensor_id = int(message.text.strip())
            telegram_id = message.from_user.id

            profile = await sync_to_async(UserProfile.objects.get)(telegram_id=telegram_id)

            profile.sensor_id = sensor_id
            await sync_to_async(profile.save)()

            await message.answer(f"üì° –í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥–∞—Ç—á–∏–∫—É `{sensor_id}`", parse_mode="Markdown", reply_markup=keyboard)
            await state.clear()

        except ValueError:
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `12345`", parse_mode="Markdown")










    @rot.message(lambda message: message.text.lower() == "–ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ")
    async def echo_handler(message: Message):
        telegram_id = message.from_user.id

        try:
            profile = await sync_to_async(UserProfile.objects.get)(telegram_id=telegram_id)
            sensor_id = profile.sensor_id

            if sensor_id is None:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥–∞—Ç—á–∏–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ: `id:12345`", parse_mode="Markdown")
                return

            data = await sync_to_async(DATT.objects.filter)(addr=sensor_id)
            latest_data = await sync_to_async(data.latest)("id")


            await message.answer(
                f"üì° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞ `{sensor_id}`:\n"
                f"–£–≥–∞—Ä–Ω—ã–π –≥–∞–∑: {latest_data.CO}\n"
                f"–ö–æ–º–Ω–∞—Ç–∞: {latest_data.room}\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {latest_data.HUM}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {latest_data.TEMP}",
                parse_mode="Markdown",
                reply_markup=keyboard
            )

        except UserProfile.DoesNotExist:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç –∏–ª–∏ –±–æ—Ç–∞.")
        except DATT.DoesNotExist:
            await message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            print(f"–û—à–∏–±–∫–∞: {e}")


    @rot.message(lambda message: message.text.lower() == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—à–ª—ã–µ –¥–∞–Ω–Ω—ã–µ")
    async def show_past_data_handler(message: Message):
        telegram_id = message.from_user.id

        try:

            profile = await sync_to_async(UserProfile.objects.get)(telegram_id=telegram_id)
            sensor_id = profile.sensor_id

            if sensor_id is None:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥–∞—Ç—á–∏–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ: `id:12345`", parse_mode="Markdown")
                return

        
            data = await sync_to_async(list)(
                DATT.objects.filter(addr=sensor_id).order_by('-id')[:10]
            )

            if not data:
                await message.answer("üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ.")
                return

            answer = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:\n\n"
            for i in data:
                answer += (
                    f"–£–≥–∞—Ä–Ω—ã–π –≥–∞–∑: {i.CO}\n"
                    f"–ö–æ–º–Ω–∞—Ç–∞: {i.room}\n"
                    f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {i.HUM}\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {i.TEMP}\n"
                    f"–≤—Ä–µ–º—è: {i.time}\n"
                    "----------------------------\n"
                )

            await message.answer(
                answer,
                reply_markup=keyboard
                )

        except UserProfile.DoesNotExist:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ —Å–∞–π—Ç.")
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", reply_markup=keyboard)
            print(f"–û—à–∏–±–∫–∞: {e}")


    @rot.message(F.text.startswith("/set_id"))
    async def change_sensor_handler(message: Message):
        telegram_id = message.from_user.id
        text = message.text.strip()
        
        try:
            
            parts = text.split()
            if len(parts) < 2:
                await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ ID –¥–∞—Ç—á–∏–∫–∞. –ü—Ä–∏–º–µ—Ä: `/set_id 12345`", parse_mode="Markdown")
                return

            new_sensor_id = int(parts[1])

            
            profile = await sync_to_async(UserProfile.objects.get)(telegram_id=telegram_id)

            
            profile.sensor_id = new_sensor_id
            await sync_to_async(profile.save)()

            await message.answer(f"üî¢ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥–∞—Ç—á–∏–∫—É `{new_sensor_id}`", parse_mode="Markdown")

        except UserProfile.DoesNotExist:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ `/start`, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/set_id 12345`", parse_mode="Markdown")
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ID –¥–∞—Ç—á–∏–∫–∞.")
            print(f"[ERROR] {e}")
    return rot
